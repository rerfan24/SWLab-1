import java.util.Arrays;

public class Sort {
    // this is an array with 1000 numbers in range (0, 10000)
    public static int[] arr = {6643, 1446, 3073, 2795, 6208, 5044, 8934, 5558, 446, 2039, 2254, 1613, 4339, 3654, 9368, 8608, 6105, 2514, 6499, 6246, 770, 8355, 73, 660, 4828, 7772, 8882, 6397, 909, 3694, 4750, 3384, 1020, 6815, 4264, 2045, 8980, 658, 5416, 5573, 7987, 5061, 1682, 434, 3755, 9086, 328, 6952, 2864, 3833, 4354, 1184, 4746, 2938, 0, 6620, 5004, 2264, 9191, 9924, 3746, 1992, 15, 501, 4689, 3247, 1853, 7305, 2109, 1778, 7226, 8674, 5995, 5707, 7388, 8567, 37, 5054, 8750, 1622, 2789, 1483, 3753, 8449, 3693, 6393, 3590, 3907, 8434, 1827, 7788, 7593, 887, 906, 5510, 300, 6690, 2414, 4067, 5992, 2315, 8074, 3613, 3192, 5947, 7229, 1931, 541, 2851, 4380, 305, 3862, 3246, 2767, 924, 3791, 2045, 4176, 6062, 2183, 2511, 2363, 9257, 8316, 3825, 9762, 9638, 1961, 5240, 1906, 5532, 9394, 4937, 6508, 5330, 8072, 9991, 226, 3517, 731, 1532, 8268, 2858, 8503, 3025, 5942, 9605, 4133, 4802, 9329, 7478, 1692, 7394, 4479, 1235, 4820, 214, 7591, 9396, 2052, 8612, 471, 9096, 3364, 3568, 8286, 8097, 1708, 4386, 3224, 6023, 2411, 9998, 4968, 8469, 4421, 7730, 2982, 2739, 7700, 958, 1909, 3804, 9636, 2482, 7684, 2893, 1783, 8041, 5834, 8199, 9966, 6014, 4456, 4690, 5373, 8906, 4822, 6497, 4022, 4129, 7805, 6991, 8389, 1944, 2155, 8192, 5458, 593, 491, 4077, 6223, 2840, 9115, 3769, 4247, 3165, 3701, 8744, 9845, 1727, 2266, 268, 9056, 5270, 5407, 675, 1053, 8628, 1751, 1202, 1413, 1266, 4633, 9701, 7535, 7806, 9094, 5375, 7886, 5987, 524, 3063, 3503, 9975, 8800, 9170, 3708, 1209, 2656, 5914, 2184, 3823, 1255, 2617, 7957, 5504, 9894, 2964, 228, 1453, 7566, 5334, 9105, 703, 1768, 6404, 3650, 9430, 6764, 4495, 6985, 6979, 5043, 7405, 3471, 5111, 964, 7283, 4217, 5753, 3275, 9870, 2426, 9295, 4419, 4326, 1475, 6392, 9533, 5591, 8122, 4595, 3225, 8062, 8439, 7864, 6489, 4547, 9521, 4477, 3155, 1678, 8882, 6021, 6017, 6866, 7454, 2209, 33, 4554, 5270, 1697, 1847, 4543, 9560, 1289, 5334, 6374, 6542, 5203, 7733, 7349, 3717, 6557, 8786, 1319, 1155, 6302, 395, 8078, 9469, 1540, 1542, 2248, 2156, 7623, 2883, 5942, 6996, 6939, 3783, 1309, 4771, 448, 4332, 4361, 9262, 7686, 4641, 2005, 2294, 3579, 6809, 5954, 5121, 8082, 3261, 3154, 9141, 2909, 3691, 8656, 9344, 1177, 1915, 2184, 6786, 6428, 7742, 1491, 7737, 2083, 5992, 4443, 4157, 8274, 1247, 8616, 3163, 479, 4659, 8074, 7615, 7896, 6553, 177, 7324, 4326, 3124, 5194, 4958, 4642, 7088, 4892, 1058, 8400, 1090, 9674, 496, 5505, 677, 4800, 4255, 9606, 3581, 6385, 2518, 9533, 5771, 1901, 8338, 9670, 9812, 1075, 3365, 6761, 110, 29, 3219, 7438, 9000, 8842, 3660, 7477, 827, 3505, 42, 9585, 7771, 9057, 553, 9585, 5300, 3288, 4313, 4097, 9748, 6916, 6944, 194, 982, 5769, 6596, 580, 8141, 6002, 1236, 6967, 8287, 5651, 1657, 7891, 716, 4321, 7421, 2793, 9275, 3181, 9753, 8713, 7910, 6694, 1116, 7786, 7490, 8558, 1090, 4108, 3684, 1994, 1672, 7247, 7362, 49, 6078, 7081, 7525, 1172, 644, 1, 8432, 9159, 2928, 8006, 7446, 6268, 978, 4946, 8805, 774, 5125, 8061, 5499, 7921, 6200, 9155, 1051, 8040, 4677, 2969, 2270, 2578, 9035, 6324, 4225, 1623, 1850, 9518, 9138, 7533, 890, 2017, 1057, 193, 9687, 5875, 223, 3019, 7581, 9146, 9705, 9392, 9513, 8435, 4849, 9579, 6973, 8257, 3050, 4737, 2700, 5049, 4326, 9235, 2927, 8404, 8546, 8453, 53, 1439, 8412, 220, 5074, 1948, 3343, 2757, 4988, 9430, 6057, 1081, 5871, 7836, 3071, 4848, 2867, 2390, 86, 249, 5068, 8660, 2937, 1860, 9454, 9225, 5141, 7854, 619, 5675, 8559, 495, 391, 580, 873, 5712, 1332, 360, 9525, 5095, 5526, 468, 6898, 1215, 9595, 8673, 5617, 6025, 7766, 1936, 756, 9613, 9358, 4811, 2452, 682, 6652, 8724, 6147, 9901, 3038, 5849, 5845, 4976, 3816, 8305, 767, 4809, 3738, 4039, 806, 4379, 1497, 2891, 9095, 1884, 8415, 3998, 556, 2480, 3384, 4825, 5082, 7921, 2848, 1333, 4513, 2563, 6772, 8010, 6133, 4469, 855, 2618, 7855, 6243, 2611, 4150, 2864, 8309, 4555, 5071, 6203, 9606, 318, 8601, 9558, 563, 1669, 4346, 5822, 7674, 7343, 6617, 5804, 684, 7929, 74, 137, 7143, 2346, 7217, 1735, 1547, 9146, 2536, 6443, 3400, 550, 5530, 4054, 695, 8513, 838, 1605, 53, 442, 798, 9761, 507, 7712, 3745, 5155, 4723, 1361, 3890, 907, 248, 2896, 8155, 8366, 3499, 1082, 4664, 9844, 6831, 1563, 5351, 839, 257, 5242, 1356, 8486, 7677, 9921, 8099, 4993, 8684, 6642, 4586, 2781, 1177, 6459, 1606, 8035, 3041, 2299, 74, 2800, 1766, 5113, 8901, 7238, 4124, 4514, 1716, 2054, 9162, 2581, 4361, 9781, 5728, 4193, 7316, 3101, 7245, 5223, 8906, 3704, 8998, 6568, 3422, 5573, 7298, 7261, 8179, 2332, 8482, 2254, 9266, 9816, 2311, 4690, 8711, 9327, 7228, 3593, 6582, 3421, 8928, 9440, 5894, 1001, 270, 9535, 1912, 3028, 7725, 6331, 9862, 7408, 882, 778, 5221, 6181, 9515, 2347, 7358, 3257, 1452, 426, 5726, 3197, 855, 5572, 7563, 6460, 4583, 227, 2461, 7441, 712, 7657, 8570, 5713, 9510, 4402, 690, 6671, 7160, 8142, 8143, 3715, 1133, 424, 1206, 7765, 1720, 6344, 4781, 7980, 2038, 1779, 5890, 8982, 3431, 2446, 68, 5843, 1941, 8808, 8617, 4357, 8461, 8749, 5642, 9271, 2429, 4334, 151, 2127, 1302, 239, 9964, 8536, 8831, 6625, 9193, 2006, 2624, 4421, 7167, 8024, 9884, 8080, 3612, 1702, 5510, 8266, 4672, 4696, 2156, 3694, 9080, 6044, 5553, 5924, 2199, 4845, 3844, 8226, 7527, 185, 393, 9436, 7797, 8965, 74, 7791, 8557, 9955, 592, 7491, 6811, 8451, 6431, 1381, 4278, 8740, 7406, 1382, 3789, 8384, 2594, 3369, 7059, 7769, 7133, 6748, 8355, 789, 663, 1561, 3499, 7742, 7609, 1073, 8382, 4389, 4215, 9918, 826, 6700, 750, 8143, 1689, 6012, 8774, 3215, 5137, 5023, 435, 3296, 2871, 7912, 9736, 5115, 2110, 4689, 1548, 9793, 1500, 8683, 2223, 4603, 4442, 4063, 759, 1253, 352, 9404, 4078, 9876, 9905, 9814, 3929, 7294, 488, 8734, 8209, 5193, 3202, 89, 523, 7654, 1927, 4725, 5371, 7065, 6150, 3375, 6260, 7020, 1310, 4077, 1319, 7073, 4284, 8023, 6149, 6094, 6560, 1110, 1781, 544, 8203, 4273, 2616, 9099, 2053, 3723, 2380, 655, 568, 1497, 2910, 2099, 2236, 3026, 8341, 6722, 8699, 5097, 1946, 5467, 5151, 869, 388, 7402, 6941, 9738, 6151, 1947, 9847, 4071, 6300, 1594, 7239, 562, 1887, 8936};

    // bubble sort algorithm with O(N^2)
    public static void bubbleSort() {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (arr[j] > arr[j + 1]) {
                    // swap arr[j+1] and arr[j]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
    }

    // part of the merge sort algorithm with O(NlogN)
    public static void merge(int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;

        /* Create temp arrays */
        int L[] = new int[n1];
        int R[] = new int[n2];

        /*Copy data to temp arrays*/
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];

        /* Merge the temp arrays */

        // Initial indexes of first and second subarrays
        int i = 0, j = 0;

        // Initial index of merged subarray array
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        /* Copy remaining elements of L[] if any */
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        /* Copy remaining elements of R[] if any */
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // part of the merge sort algorithm with O(NlogN)
    public static void mergeSort(int l, int r)
    {
        if (l < r) {
            // Find the middle point
            int m = l + (r - l) / 2;

            // Sort first and second halves
            mergeSort(l, m);
            mergeSort(m + 1, r);

            // Merge the sorted halves
            merge(l, m, r);
        }
    }

    public static void main(String[] args) {
        int[] arrCopy = arr;
        for (int i = 0; i < 10000; i++) {
            arr = arrCopy;
            bubbleSort();
//            mergeSort(0, arr.length - 1);
        }
//        System.out.println(Arrays.toString(arr));
    }
}
